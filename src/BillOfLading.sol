// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import "../lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol";
contract BillOfLading is ERC1155 {

	struct OrderData {
        address buyer;
        address seller;
        address carrier;
        uint256 referenceNumber;
        string goods;
        uint256 quantity;
        uint256 number;
        uint256 price;
        bool init;
		bool isSentToCarrier;
		bool isSentToBuyer;

    }

    mapping (uint256 => OrderData) public orders;
	mapping(address => uint256[]) public sellerOrders;
	mapping(address => uint256[]) public carreirOrders;
	mapping(address => uint256[]) public buyerOrders;
	uint256 id;

	event NewBillGenerated(address by, uint256 id);
	event BillSentToCarreir(address seller, address carrier, uint256 id);
	event BillSentToBuyer(address seller, address buyer, uint256 id);
	constructor()ERC1155("www.billoflading.com"){}


	function generateBillOfLading(OrderData memory _orderData) external {
		require(_orderData.seller == msg.sender, "Only generated by seller");
		bytes memory data = abi.encode(_orderData);
		id++;
		orders[id] = _orderData;
		_mint(msg.sender, id, 3, data);
		sellerOrders[msg.sender].push(id);
		emit NewBillGenerated(msg.sender, id);
	}

	function sendBillOfLadingToCarreir(uint256 _id) external {
		OrderData storage _orderData = orders[_id];
		require(_orderData.seller == msg.sender, "Only called by seller");
		require(!_orderData.isSentToCarrier, "already sent to carreir");

		_orderData.isSentToCarrier = true;
		carreirOrders[_orderData.carrier].push(_id);
		safeTransferFrom(msg.sender, _orderData.carrier, _id, 1, "data");
		emit BillSentToCarreir(msg.sender, _orderData.carrier, _id);

	}

	function sendBillOfLadingToBuyer(uint256 _id) external {
		OrderData storage _orderData = orders[_id];
		require(_orderData.seller == msg.sender, "Only called by seller");
		require(!_orderData.isSentToBuyer, "already sent");

		_orderData.isSentToBuyer = true;
		buyerOrders[_orderData.buyer].push(_id);
		safeTransferFrom(msg.sender, _orderData.buyer, _id, 1, 'data');

		emit BillSentToBuyer(msg.sender, _orderData.buyer, _id);

	}
}